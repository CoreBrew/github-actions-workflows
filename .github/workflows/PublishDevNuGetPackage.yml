name: PublishDevNuGetPackage

run-name: Deploy to NuGet.org by @{{ github.actor }}

on:
  workflow_call:
    inputs:
      devReleaseStage:
        description: 'The release stage to deploy to, fx alpha, beta, rc'
        required: true
        type: string
    secrets:
      NuGetApiKey:
        description: 'A NuGetApiKey passed from the caller workflow'
        required: true
        
jobs:
  Shared-Build-workflow:
    uses: CoreBrew/github-actions-workflows/.github/workflows/BuildSolution.yml@main
    with:
      buildConfiguration: Debug
        
  Shared-Test-workflow:
    needs: Shared-Build-workflow
    uses: CoreBrew/github-actions-workflows/.github/workflows/DotNet_RunTests.yml@main
  
  shared-Pack-workflow:
    needs: Shared-Test-workflow
    uses: CoreBrew/github-actions-workflows/.github/workflows/DotNet_PackSolution.yml@main
    with:
      buildConfiguration: Debug
  
  
  watwat:
    needs: Shared-Build-workflow
    steps:
            
   #Read the title tag in the .csproj file   
    - name: Read <Title> from .csproj
      shell: pwsh
      run: |
        # Find the .csproj file, use -Recurse to find all csproj files        
        $csprojPath = Get-ChildItem -Path ./Src -Recurse -Filter *.csproj | Select-Object -First 1

        if ($csprojPath) {
            # Use Select-Xml to extract the Title tag value
            $titleNode = Select-Xml -Path $csprojPath.FullName -XPath "//Project/PropertyGroup/Title" | Select-Object -First 1

            if ($titleNode -ne $null) {
                $title = $titleNode.Node.InnerText.ToLower()
                Write-Host "Project Title: $title"     
                "CSPROJ_TITLE=$title" >> $env:GITHUB_ENV
            }
            else {
                Write-Host "No <Title> tag found in the .csproj file."
            }
        }
        else {
            Write-Host "No .csproj file found in the directory."
            Write-Host "Current directory is: $(Get-Location)"
            Write-Host "############# with source #########################"
            Write-Host "Dir command: $(Get-ChildItem -Path ./Src -Recurse)"
            Write-Host "############# without source ######################"        
            Write-Host "Dir command: $(Get-ChildItem -Path . -Recurse)"        
        }
      
      # Use the project title in subsequent steps if needed
    - name: Use Project Title
      run: |
        echo "The project title is $env:CSPROJ_TITLE"      
        echo $CSPROJ_TITLE
      
      #https://api.nuget.org/v3-flatcontainer/corebrew.appstarter/index.json - test in fx browser
      # Fetch the latest package version from NuGet.org
    - name: Fetch latest alpha version
      shell: pwsh
      run: |
        $latestVersion = (Invoke-RestMethod -Uri "https://api.nuget.org/v3-flatcontainer/$env:CSPROJ_TITLE/index.json").versions |
                         Where-Object { $_ -like "*-alpha*" } |
                         Sort-Object { [System.Version]$_ } -Descending |
                         Select-Object -First 1

        if (-not $latestVersion) {
          Write-Host "No alpha version found, starting from 1.0.0-alpha.1"          
          $nextVersion = "1.0.0-alpha.1"
        }
        else {
          Write-Host "Latest alpha version found: $latestVersion"
          $versionParts = $latestVersion -split '-alpha.'
          $majorMinorPatch = $versionParts[0]
          $alphaVersion = [int]$versionParts[1]
          $nextVersion = "$majorMinorPatch-alpha.$($alphaVersion + 1)"
        }
        Write-Host "Latest version is:    $latestVersion"
        Write-Host "Next version will be: $nextVersion"
        echo "::set-output name=nextVersion::$nextVersion"      

      # Find the .nupkg file and push it
    #- name: Push NuGet package
    #  env:
    #    NUGET_API_KEY: ${{ secrets.NuGetApiKey }}
    #  run: |
    #    $nupkg = Get-ChildItem -Path ./artifacts -Filter *.nupkg | Select-Object -First 1
    #    if ($nupkg -eq $null) {
    #      throw "No .nupkg file found in ./artifacts"
    #    }
    #      dotnet nuget push $nupkg.FullName -k $env:NUGET_API_KEY -s https://api.nuget.org/v3/index.json
    #  shell: pwsh
          
